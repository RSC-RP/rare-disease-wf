includeConfig "./sasquatch.config"

// parameters
params {
    // VCF to start with
    //vcf = "/gpfs/shared_data/demo_data/rare-disease-wf/Ashkenazim_GIAB.glnexus.bcf" // WES, full genome, on single trio
    vcf = "testdata/Ashkenazim_GIAB_small.glnexus.vcf" // WES on single trio, subsetted to a tiny fraction of the genome
    chromnames = 'g1k' // Format for chromosome names input. g1k = 1000 Genomes. Alternatives are ensembl and ucsc. Use ucsc if chromosome names start with 'chr'
    sort = false // Whether to sort the VCF before processing.

    // Pedigree file
    ped = "testdata/GIAB_pedigree.txt"
    trios_present = true // Set to false if pedigree contains no trios (duos only).

    // Sample metadata for UMAP plots
    metadata_tab = "testdata/GIAB_demographics.txt"
    metadata_columns = "affected,batch,favorite_animal"

    // Incidental findings
    do_incidental = true
    incidental_samples = "testdata/GIAB_incidental.txt"

    // Should annotated VCF be exported before filtering?
    export_prefilt = false

    // BAMs and variant calling
    sample_bams = "testdata/GIAB_samples_small.csv"
    deepvar_model = "WES" // Should be WGS or WES.
    cohort_name = "Ashkenazim_GIAB_small"
    //make_examples_nshards = 32 // Use 32 for full genome.
    make_examples_nshards = 4 // Use this many for tiny example dataset.
    test_bams = true // change to false to run the entire genome.  True runs a tiny example piece.
    // fasta_bams should be the reference genome that was used for alignment of the BAMs. Check BAM header if unsure.
    fasta_bams = "/data/hps/assoc/public/bioinformatics/annotations/Homo_sapiens/Ensembl/GRCh37/Sequence/WholeGenomeFasta/Homo_sapiens.GRCh37.dna.primary_assembly.fa"

    // output
    outdir = "results"

    // Ensembl reference - change if using hg38
    fasta_ensembl = "/data/hps/assoc/public/bioinformatics/annotations/Homo_sapiens/Ensembl/GRCh37/Sequence/WholeGenomeFasta/Homo_sapiens.GRCh37.dna.primary_assembly.fa"
    gff_ensembl = "/data/hps/assoc/public/bioinformatics/annotations/Homo_sapiens/Ensembl/GRCh37/Annotation/Genes/Homo_sapiens.GRCh37.87.gff3"

    // Directory for cached snpEff database
    snpEff_dir = "/data/hps/assoc/public/bioinformatics/annotations/Homo_sapiens/Ensembl/GRCh37/Annotation/SnpEff/"

    // Gnotation and selfchain files for slivar
    slivar_zip = "/data/hps/assoc/public/bioinformatics/annotations/Homo_sapiens/Ensembl/GRCh37/Annotation/Slivar/gnomad.hg37.zip"
    slivar_selfchain = "/data/hps/assoc/public/bioinformatics/annotations/Homo_sapiens/Ensembl/GRCh37/Annotation/Slivar/selfchain-LCR.hg19.bed"

    // AnnoVar database files
    annovar_db = "/data/hps/assoc/public/bioinformatics/annotations/Homo_sapiens/annovar/humandb"
    annovar_buildver = "hg19"

    // MVP pathogenicity prediction score table
    mvp_tab = "/data/hps/assoc/public/bioinformatics/annotations/Homo_sapiens/Ensembl/GRCh37/Annotation/MVP/MVP_score_hg19.txt"

    // Slivar filtering parameters
    maf_recessive = "0.001"
    maf_dominant = "0.00002"
    maf_denovo = "0.001"
    comphet_nhomalt = "10"

    // Pathogenicity filtering parameters
    mvp_thresh = 0.9
    cadd_thresh = 7
    dann_thresh = 0.999
    gerp_thresh = 5.5

    // UMAP parameters
    umap_seed = 3334444
    umap_min_call_rate = 0.95
    umap_n_exons = 5000
    umap_n_pcs = 50

    // File used if UCSC chromosome names need to be changed to Ensembl
    chrom_convert = 'chrom_conversion.txt'

    // gnomAD VCF
    // Not used in the main repo, but can be used with BCFTOOLS_ANNOTATE_INFO to add allele frequencies.
    gnomad_vcf = '/data/hps/assoc/public/bioinformatics/annotations/Homo_sapiens/gnomAD/gnomad.genomes.r2.1.1.sites.vcf.bgz'

    // Params for preprocessvcf which may be deprecated
    fasta38ucsc = "/data/hps/assoc/public/bioinformatics/annotations/Homo_sapiens/UCSC/hg38/Sequence/WholeGenomeFasta/genome.fa"
    fasta19ucsc = "/data/hps/assoc/public/bioinformatics/annotations/Homo_sapiens/UCSC/hg19/Sequence/WholeGenomeFasta/genome.fa"
    do_liftover = true // Set to true if VCF is hg19, and false if it is hg38.
    picard_max_records_in_ram = 500000 // lower if liftover is running out of memory
    picard_memory_gb = 15 // memory available for liftover, in Gb
}

process {
    errorStrategy = { task.exitStatus in [1,143,137,104,134,139,250] ? 'retry' : 'terminate' }
    cache = 'lenient'
    maxRetries = 0
    // Set default memory (to prevent using whole node) and then override for specific modules.
    memory = 7500.MB
    withName:'SNPEFF'{
        cpus = 1
        memory = 7500.MB
    }
    withName:'MVP_ANNO'{
        cpus = 1
        memory = 45.GB
    }
    withName:'SPLIT' {
        cpus = 2
        memory = 4.GB
    }
    withName:'SNPSIFT_ANNOTATE'{
        cpus = 1
        memory = 7500.MB
    }
    withName:'FILTER_PATHOGENIC'{
        cpus = 1
        memory = 15.GB
    }
    withName:'MAKE_EXAMPLES_TRIO' {
        cpus = params.make_examples_nshards
        memory = 64.GB
    }
    withName:'CALL_VARIANTS_TRIO' {
        // Settings to use GPU with Slurm
        queue = 'gpu-core-sponsored'
        clusterOptions = "-N 1 -n 4 --mem=51200m --gpus 1 --account gpu-${params.assoc}-sponsored --time=72:00:00"
        apptainer.runOptions = '--containall --no-home --nv'
    }
    withName:'POSTPROCESS_VARIANTS' {
        cpus = 1
        memory = 30.GB
    }
    withName:'GLNEXUS' {
        cpus = 16
        memory = 120.GB
    }
    withLabel:'process_single' {
        cpus = 1
        memory = 7500.MB
    }
}
